prog := func | 
        func prog ^;

func := iden ( flist ) : type { body } ^;

body := ~ |
       stmt |
       stmt body ^;

stmt := U | M ^;

U := M | if ( expr ) U | if ( expr ) M else U ^;

M := expr ; |
    defvar ; |
    if ( expr ) M else M |
    while ( expr ) stmt |
    for ( iden in expr ) stmt |
    return expr ; |
    { body } ^;

defvar := local flist ^;

expr := expr1 = expr |
        expr1 ^;

expr1 := expr2 + expr1 |
         expr2 - expr1 |
         expr2 * expr1 |
         expr2 / expr1 |
         expr2 % expr1 |
         expr2 < expr1 |
         expr2 > expr1 |
         expr2 == expr1 |
         expr2 <= expr1 |
         expr2 >= expr1 |
         expr2 || expr1 |
         expr2 && expr1 |
         expr2 ^;

expr2 := expr3 [ expr4 ] |
         expr4 ^;

expr3 := ! expr |
         - expr |
         + expr |
         ( expr ) |
         iden |
         number ^;

expr4 := ! expr |
         - expr |
         + expr |
         ( expr ) |
         iden |
         number ^;

flist := ~ |
         iden: type |
         iden: type , flist ^;

clist := ~ |
         expr |
         expr , clist ^;

type := num |
        list ^;
